using System;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;

namespace OctopusNET.CryptoServices
{
    public static class AesServiceProvider
    {
        public static string AES_encrypt(string input, string key, string iv)
        {
            var aes = CreateAesManaged(key, iv);
            var encrypt = aes.CreateEncryptor(aes.Key, aes.IV);
            byte[] buffer;

            using (var ms = new MemoryStream())
            {
                using (var cs = new CryptoStream(ms, encrypt, CryptoStreamMode.Write))
                {
                    byte[] inputBytes = Encoding.UTF8.GetBytes(input);
                    cs.Write(inputBytes, 0, inputBytes.Length);
                    cs.Close();
                }

                buffer = ms.ToArray();
            }

            var output = Convert.ToBase64String(buffer);
            return output;
        }


        //public string AES_encrypt(byte[] input, string key, string iv)
        //{
        //    var aes = CreateAesManaged(key, iv);
        //    var encrypt = aes.CreateEncryptor(aes.Key, aes.IV);
        //    byte[] buffer;

        //    using (var ms = new MemoryStream())
        //    {
        //        using (var cs = new CryptoStream(ms, encrypt, CryptoStreamMode.Write))
        //        {
        //            cs.Write(input, 0, input.Length);
        //            cs.Close();
        //        }

        //        buffer = ms.ToArray();
        //    }

        //    var output = Convert.ToBase64String(buffer);
        //    return output;
        //}


        public static string AES_decrypt(string input, string key, string iv)
        {
            var aes = CreateAesManaged(key, iv);
            var decrypt = aes.CreateDecryptor();
            byte[] buffer;

            using (var ms = new MemoryStream())
            {
                using (var cs = new CryptoStream(ms, decrypt, CryptoStreamMode.Write))
                {
                    var inputBytes = Convert.FromBase64String(input);
                    cs.Write(inputBytes, 0, inputBytes.Length);
                    cs.Close();
                }

                buffer = ms.ToArray();
            }

            var output = Encoding.UTF8.GetString(buffer);
            return output.Trim();
        }


        private static RijndaelManaged CreateAesManaged(string key, string iv)
        {
            var k = Convert.FromBase64String(key);
            var i = Convert.FromBase64String(iv);

            return new RijndaelManaged
            {
                KeySize = 256,
                BlockSize = 128,
                Mode = CipherMode.CBC,
                Padding = PaddingMode.Zeros,
                Key = k,
                IV = i
            };
        }



        // ReSharper disable once UnusedMember.Local
        private static byte[] Combine(byte[] first, byte[] second)
        {
            return first.Concat(second).ToArray();
        }
    }

}
